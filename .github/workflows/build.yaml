name: BuildFrontEndApp

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout source code
      - name: Checkout Source Code
        uses: actions/checkout@v2

      # Step 2: Verify Node.js version
      - name: Check Node Version
        run: node -v

      # Step 3: Install dependencies and build
      - name: Build Source Code
        run: |
          npm install
          npm run build

      # Step 4: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Log in to Amazon ECR
      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Generate image tag
      - name: Generate Image Tag
        id: image
        run: |
          VERSION=$(echo "${{ github.sha }}" | cut -c1-8)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 7: Build and tag Docker image
      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/amazon-eks-frontend-ci:${{ env.VERSION }} .
          echo "IMAGE=${{ steps.login-ecr.outputs.registry }}/amazon-eks-frontend-ci:${{ env.VERSION }}" >> $GITHUB_ENV

      # Step 8: Scan image for vulnerabilities using Trivy
      - name: Vulnerability Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/amazon-eks-frontend-ci:${{ env.VERSION }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Step 9: Push Docker image to Amazon ECR
      - name: Push Docker Image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/amazon-eks-frontend-ci:${{ env.VERSION }}

    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      ecr_repository: amazon-eks-frontend-ci
      image_tag: ${{ env.VERSION }}

  kustomize-cd:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: build

    steps:
      # Step 1: Setup Kustomize
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      # Step 2: Checkout manifests repository
      - name: Checkout Manifests Repository
        uses: actions/checkout@v2
        with:
          repository: phelun/microservices
          ref: main
          token: ${{ secrets.ACTION_TOKEN }}
          path: manifests

      # Step 3: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Update Kubernetes resource with new image tag
      - name: Update Kubernetes Resources
        run: |
          echo "ECR Registry: ${{ needs.build.outputs.ecr_registry }}"
          echo "ECR Repository: ${{ needs.build.outputs.ecr_repository }}"
          echo "Image Tag: ${{ needs.build.outputs.image_tag }}"
          cd manifests/aws-workshop-webapp-svc/overlays/dev/
          kustomize edit set image ${{ needs.build.outputs.ecr_registry }}/${{ needs.build.outputs.ecr_repository }}=${{ needs.build.outputs.ecr_registry }}/${{ needs.build.outputs.ecr_repository }}:${{ needs.build.outputs.image_tag }}
          cat kustomization.yaml

      # Step 5: Commit changes to manifests repository
      - name: Commit and Push Changes
        run: |
          cd manifests
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git commit -am "Update image tag"
          git push -u origin main
